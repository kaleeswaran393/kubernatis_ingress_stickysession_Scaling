#!groovy
node('linux && ansible') {

  def jdkHome
  def mvnHome
  
  def gitShortCommitID = null
  
  def job_name_token = "${JOB_NAME}".split('/')
  def job_branch_name = "${job_name_token[-1]}".toLowerCase()
  def sonarqube_pretag = "${job_branch_name}-bld${BUILD_NUMBER}"
  
  // Get the source code
  stage('Source') {
    checkout scm
	gitShortCommitID = gitCommitShortHash()
    notifyStash
  }

  // Prepare the build environment 
  stage('Build Environment') {
    jdkHome = installTool "jdk1.8.0_141"
    mvnHome = installTool "apache-maven-3.3.9"
  }
  
  // Compile the Code
  stage('Build'){
    withEnv(["JAVA_HOME=${jdkHome}", "MAVEN_HOME=${mvnHome}", "PATH+MAVEN=${mvnHome}/bin"]) {
      artifactoryMaven {
        goals = '-X clean compile'
        deploy_artifacts = false
      }
    }
  }

  // Run unit test
  stage('Unit Test') {
    withEnv(["JAVA_HOME=${jdkHome}", "MAVEN_HOME=${mvnHome}", "PATH+MAVEN=${mvnHome}/bin"]) {
      artifactoryMaven {
        goals = '-X clean test'
        deploy_artifacts = false
      }
    }
    junit('**/target/surefire-reports/TEST-*.xml')
  } 
  
  // Run SonarQube Analysis
  sonarQube {
    version = "${sonarqube_pretag}-${gitShortCommitID}"
    code_sources = 'src/'
    binary_location = 'target/'
  }
 
  // Run AppScan Analysis
  appScan {
    version = "${sonarqube_pretag}-${gitCommit}"
    code_sources = 'src/'
    include_folder="src"
    exclude_folder="src/test"
    precompiled_classes="target/classes"
    report_type = 'zip'
  }
  
  // Package the binary and upload to binary repository
  stage('Package & Upload to Artifactory') {
    catchError {
      withEnv(["JAVA_HOME=${jdkHome}", "MAVEN_HOME=${mvnHome}", "PATH+MAVEN=${mvnHome}/bin"]) {
        artifactoryMaven {
          goals = '-X clean install'
        }
      }
    }
    notifyStash()
  }
  
  // Deploy the binary to host using an Ansible playbook
  stage('Deploy'){
    echo("Deploying Application using Ansible Playbook")
	withCredentials([sshUserPrivateKey(credentialsId: 'my-credential-id', keyFileVariable: '', passphraseVariable: '', usernameVariable: '')]){
      ansiblePlaybook(
		playbook: 'ansible/playbooks/deploy.yml',
		inventory: "ansible/environments/test/hosts",
		credentialsId: "my-credential-id",
		sudo: true
      )
	}
  }
  
}
